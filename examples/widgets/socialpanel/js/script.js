// Generated by CoffeeScript 1.7.1
(function() {
  var activateLists, alignChildren, checkResize, elements, getPlatform, init, initSlider, initWaves, makeSquare, rows, slide;

  getPlatform = function() {
    return window.getComputedStyle(document.body, ':before').getPropertyValue('content').replace(/'/g, '').replace(/"/g, '');
  };

  $('.icon.icon-list2').on('click', function() {
    if (getPlatform() === 'smartphone vertical' || getPlatform() === 'smartphone horizontal') {
      if ($('.top-nav').hasClass('relative')) {
        $('.top-nav span').remove();
        $('.top-nav').removeClass('relative');
        $('.top-nav').removeClass('desktop-nav');
      } else {
        $('.top-nav').addClass('relative');
        $('.top-nav').addClass('desktop-nav');
      }
    }
  });

  rows = {
    'mod-row': ['card', 'tile'],
    'mod-lists .list-item': ['pull-left', 'pull-right']
  };

  alignChildren = function(rows) {
    var children, row, _results;
    if (rows == null) {
      rows = {};
    }
    _results = [];
    for (row in rows) {
      children = rows[row];
      _results.push($('.' + row).each(function() {
        var child, parent, tallest, _i, _len, _results1;
        parent = $(this);
        tallest = false;
        _results1 = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          parent.find('.' + child).each(function() {
            var height, obj;
            obj = $(this);
            obj.css('height', 'auto');
            height = obj.outerHeight();
            if (height > tallest) {
              return tallest = height;
            }
          });
          if (tallest) {
            _results1.push((function() {
              var _j, _len1, _results2;
              _results2 = [];
              for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
                child = children[_j];
                _results2.push(parent.find('.' + child).css('height', tallest));
              }
              return _results2;
            })());
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }));
    }
    return _results;
  };

  elements = ['resize', 'circle'];

  makeSquare = function(elements, angle) {
    var element, _i, _len, _results;
    if (elements == null) {
      elements = ['resize'];
    }
    if (angle == null) {
      angle = 'height';
    }
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _results.push($('.' + element).each(function() {
        var obj, reset, value;
        obj = $(this);
        if (angle === 'height') {
          value = obj.innerWidth();
          reset = 'width';
        } else {
          value = obj.outerHeight();
          reset = 'height';
        }
        return obj.css(angle, value);
      }));
    }
    return _results;
  };

  checkResize = function() {
    return $(window).resize(function() {
      clearTimeout(window.counter);
      return window.counter = setTimeout(function() {
        makeSquare(elements);
        alignChildren(rows);
        return window.platform = getPlatform();
      }, 500);
    });
  };

  activateLists = function() {
    return $('.minimized li a').on('click', function() {
      var children, obj, toggle;
      obj = $(this);
      if (obj.attr('href') === '#') {
        children = obj.parent().children('ul');
        toggle = obj.find('.toggle');
        if (children.hasClass('opened')) {
          children.removeClass('opened');
          toggle.removeClass(toggle.attr('data-altclass'));
          toggle.addClass(toggle.attr('data-class'));
          children.slideUp('fast');
        } else {
          children.addClass('opened');
          toggle.removeClass(toggle.attr('data-class'));
          toggle.addClass(toggle.attr('data-altclass'));
          children.slideDown('fast');
        }
        return false;
      }
    });
  };

  slide = function(obj, nextslide, nav) {
    var marginleft;
    marginleft = nextslide * 100;
    obj.children('.stripe').animate({
      'marginLeft': '-' + marginleft + '%'
    });
    nav.find('a').removeClass('active');
    nav.find('a:eq(' + nextslide + ')').addClass('active');
    if ((nextslide + 1) === obj.find('.slide').length) {
      return 0;
    } else {
      return nextslide + 1;
    }
  };

  initSlider = function() {
    var interval, sliders;
    sliders = $('.slider');
    interval = 8000;
    sliders.each(function() {
      var hammertime, nav, nextslide, slider;
      slider = $(this);
      nav = slider.find('.slider-nav');
      if (slider.find('.stripe.crow .slide').length > 1) {
        if (typeof slider.data('nextslide') === 'undefined') {
          nextslide = 1;
          slider.data('nextslide', nextslide);
        }
        slider.data('interval', setInterval(function() {
          nextslide = slider.data('nextslide');
          return slider.data('nextslide', slide(slider, nextslide, nav));
        }, interval));
        hammertime = new Hammer(slider[0]);
        hammertime.on('swipeleft', function(ev) {
          clearInterval(slider.data('interval'));
          nextslide = slider.data('nextslide');
          slider.data('nextslide', slide(slider, nextslide, nav));
          return console.log(nextslide);
        });
        hammertime.on('swiperight', function(ev) {
          clearInterval(slider.data('interval'));
          nextslide = (slider.data('nextslide')) - 1;
          if (nextslide < 0) {
            nextslide = slider.find('.stripe.crow .slide').length - 1;
          }
          slider.data('nextslide', nextslide);
          return slide(slider, nextslide, nav);
        });
      }
      return nav.find('a').on('click', function() {
        var index;
        clearInterval(slider.data('interval'));
        index = nav.find('a').index(this);
        slide(slider, index, nav);
        return false;
      });
    });
  };

  initWaves = function() {
    var w;
    w = new Waves();
    return w.displayEffect();
  };

  init = function() {
    setTimeout(function() {
      makeSquare(elements);
      return alignChildren(rows);
    }, 100);
    checkResize();
    activateLists();
    initSlider();
    return initWaves();
  };

  init();

}).call(this);
